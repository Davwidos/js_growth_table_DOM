{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\n// write code here\nvar MIN_ROW_COL_COUNT = 2;\nvar MAX_ROW_COL_COUNT = 10;\nfunction makeTableGrowthListener(table, minRows, maxRows) {\n    var minCols = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : minRows, maxCols = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : maxRows;\n    return function(e) {\n        if (e.target.tagName !== \"BUTTON\") return;\n        var button = e.target;\n        var buttonClases = [\n            \"append-row\",\n            \"remove-row\",\n            \"append-column\",\n            \"remove-column\"\n        ];\n        var buttonClass = Array.from(button.classList).find(function(cl1) {\n            return buttonClases.some(function(cl2) {\n                return cl1 === cl2;\n            });\n        });\n        switch(buttonClass){\n            case \"append-row\":\n                appendRow(table, maxRows, button);\n                break;\n            case \"remove-row\":\n                removeRow(table, minRows, button);\n                break;\n            case \"append-column\":\n                addColumn(table, maxCols, button);\n                break;\n            case \"remove-column\":\n                removeColumn(table, minCols, button);\n                break;\n        }\n    };\n}\nfunction appendRow(table, maxRows, button) {\n    var numberOfRows = table.children.length;\n    if (numberOfRows >= maxRows) {\n        button.disabled = true;\n        return;\n    }\n    var row = document.createElement(\"TR\");\n    var numberOfColumns = table.firstElementChild.children.length;\n    for(var i = 0; i < numberOfColumns; i++)row.append(document.createElement(\"TD\"));\n    table.append(row);\n    document.querySelector(\".remove-row\").disabled = false;\n    if (numberOfRows + 1 >= maxRows) button.disabled = true;\n}\nfunction removeRow(table, minRows, button) {\n    var numberOfRows = table.children.length;\n    if (numberOfRows <= minRows) {\n        button.disabled = true;\n        return;\n    }\n    table.lastElementChild.remove();\n    document.querySelector(\".append-row\").disabled = false;\n    if (numberOfRows - 1 <= minRows) button.disabled = true;\n}\nfunction addColumn(table, maxCols, button) {\n    var numberOfColumns = table.firstElementChild.children.length;\n    if (numberOfColumns >= maxCols) {\n        button.disabled = true;\n        return;\n    }\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = table.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var row = _step.value;\n            row.append(document.createElement(\"TD\"));\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    document.querySelector(\".remove-column\").disabled = false;\n    if (numberOfColumns + 1 >= maxCols) button.disabled = true;\n}\nfunction removeColumn(table, minCols, button) {\n    var numberOfColumns = table.firstElementChild.children.length;\n    if (numberOfColumns <= minCols) {\n        button.disabled = true;\n        return;\n    }\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = table.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var row = _step.value;\n            row.lastElementChild.remove();\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    document.querySelector(\".append-column\").disabled = false;\n    if (numberOfColumns - 1 <= minCols) button.disabled = true;\n}\nvar tableElement = document.querySelector(\".field tbody\");\nvar listener = makeTableGrowthListener(tableElement, MIN_ROW_COL_COUNT, MAX_ROW_COL_COUNT);\ndocument.addEventListener(\"click\", listener);\n\n//# sourceMappingURL=index.d7993f6f.js.map\n","'use strict';\n\n// write code here\nconst MIN_ROW_COL_COUNT = 2;\nconst MAX_ROW_COL_COUNT = 10;\n\nfunction makeTableGrowthListener(\n  table,\n  minRows,\n  maxRows,\n  minCols = minRows,\n  maxCols = maxRows,\n) {\n  return (e) => {\n    if (e.target.tagName !== 'BUTTON') {\n      return;\n    }\n\n    const button = e.target;\n    const buttonClases = [\n      'append-row',\n      'remove-row',\n      'append-column',\n      'remove-column',\n    ];\n    const buttonClass = Array.from(button.classList).find((cl1) => {\n      return buttonClases.some((cl2) => cl1 === cl2);\n    });\n\n    switch (buttonClass) {\n      case 'append-row':\n        appendRow(table, maxRows, button);\n        break;\n      case 'remove-row':\n        removeRow(table, minRows, button);\n        break;\n      case 'append-column':\n        addColumn(table, maxCols, button);\n        break;\n      case 'remove-column':\n        removeColumn(table, minCols, button);\n        break;\n    }\n  };\n}\n\nfunction appendRow(table, maxRows, button) {\n  const numberOfRows = table.children.length;\n\n  if (numberOfRows >= maxRows) {\n    button.disabled = true;\n\n    return;\n  }\n\n  const row = document.createElement('TR');\n  const numberOfColumns = table.firstElementChild.children.length;\n\n  for (let i = 0; i < numberOfColumns; i++) {\n    row.append(document.createElement('TD'));\n  }\n\n  table.append(row);\n  document.querySelector('.remove-row').disabled = false;\n\n  if (numberOfRows + 1 >= maxRows) {\n    button.disabled = true;\n  }\n}\n\nfunction removeRow(table, minRows, button) {\n  const numberOfRows = table.children.length;\n\n  if (numberOfRows <= minRows) {\n    button.disabled = true;\n\n    return;\n  }\n\n  table.lastElementChild.remove();\n  document.querySelector('.append-row').disabled = false;\n\n  if (numberOfRows - 1 <= minRows) {\n    button.disabled = true;\n  }\n}\n\nfunction addColumn(table, maxCols, button) {\n  const numberOfColumns = table.firstElementChild.children.length;\n\n  if (numberOfColumns >= maxCols) {\n    button.disabled = true;\n\n    return;\n  }\n\n  for (const row of table.children) {\n    row.append(document.createElement('TD'));\n  }\n\n  document.querySelector('.remove-column').disabled = false;\n\n  if (numberOfColumns + 1 >= maxCols) {\n    button.disabled = true;\n  }\n}\n\nfunction removeColumn(table, minCols, button) {\n  const numberOfColumns = table.firstElementChild.children.length;\n\n  if (numberOfColumns <= minCols) {\n    button.disabled = true;\n\n    return;\n  }\n\n  for (const row of table.children) {\n    row.lastElementChild.remove();\n  }\n\n  document.querySelector('.append-column').disabled = false;\n\n  if (numberOfColumns - 1 <= minCols) {\n    button.disabled = true;\n  }\n}\n\nconst tableElement = document.querySelector('.field tbody');\nconst listener = makeTableGrowthListener(\n  tableElement,\n  MIN_ROW_COL_COUNT,\n  MAX_ROW_COL_COUNT,\n);\n\ndocument.addEventListener('click', listener);\n"],"names":["listener","makeTableGrowthListener","table","minRows","maxRows","minCols","arguments","length","maxCols","e","target","tagName","button","buttonClases","Array","from","classList","find","cl1","some","cl2","appendRow","numberOfRows","children","disabled","row","document","createElement","numberOfColumns","firstElementChild","i","append","querySelector","removeRow","lastElementChild","remove","addColumn","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","err","return","removeColumn","addEventListener"],"version":3,"file":"index.d7993f6f.js.map"}